

import os
import json
import random
import re
from pathlib import Path
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv(dotenv_path=Path(__file__).parent / ".env")
TOKEN = os.getenv("TOKEN")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞: TOKEN=your_token_here

DATA_FILE = "cards.json"
quiz_mode = {}
correct_answer_map = {}

# --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
def load_cards():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_cards(cards):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(cards, f, ensure_ascii=False, indent=2)

# --- –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cards = load_cards()
    total = len(cards.get(user_id, {}))

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total} —Å–ª–æ–≤. "
        "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /quiz –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: dog - —Å–æ–±–∞–∫–∞"
    )
    await update.message.reply_text(text)
    

async def handle_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cards = load_cards()
    user_cards = cards.get(user_id, {})

    lines = update.message.text.strip().split("\n")
    added, skipped = 0, 0

    for line in lines:
        parts = re.split(r"\s*[-‚Äì‚Äî]\s*", line, maxsplit=1)
        if len(parts) != 2:
            skipped += 1
            continue
        word, translation = parts
        word, translation = word.strip(), translation.strip()
        if word and translation:
            user_cards[word] = translation
            added += 1
        else:
            skipped += 1

    cards[user_id] = user_cards
    save_cards(cards)

    msg = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}."
    if skipped:
        msg += f" –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped} —Å—Ç—Ä–æ–∫ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)."
    await update.message.reply_text(msg)

# --- –ö–≤–∏–∑
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    cards = load_cards().get(user_id, {})

    print(f">>> /quiz –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç {user_id}, –≤—Å–µ–≥–æ —Å–ª–æ–≤: {len(cards)}")

    if len(cards) < 2:
        await update.message.reply_text("‚õîÔ∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞.")
        return

    word, correct = random.choice(list(cards.items()))
    wrong = random.choice([v for k, v in cards.items() if v != correct] or ["(–¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–≤–æ–¥)"])

    options = [correct, wrong]
    random.shuffle(options)

    correct_index = options.index(correct)
    context.user_data["quiz_word"] = word
    context.user_data["quiz_correct_index"] = correct_index
    context.user_data["quiz_options"] = options

    keyboard = [
        [InlineKeyboardButton(text=opt, callback_data=str(i))]
        for i, opt in enumerate(options)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: *{word}*?",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

    

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    correct_index = user_data.get("quiz_correct_index")
    options = user_data.get("quiz_options", [])
    selected_index = int(query.data)

    if selected_index == correct_index:
        await query.edit_message_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct = options[correct_index]
        await query.edit_message_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")


# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("quiz", quiz))
    app.add_handler(CallbackQueryHandler(handle_answer))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_words))

    app.run_polling()
